---
// Cart Modal Component
---

<div id="cart-modal" class="cart-modal" aria-hidden="true">
  <div class="cart-overlay"></div>
  <div class="cart-container">
    <div class="cart-header">
      <h2 class="cart-title">Carrito de Compras</h2>
      <button class="cart-close" aria-label="Cerrar carrito">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
    </div>

    <div class="cart-content">
      <div id="cart-items" class="cart-items">
        <!-- Cart items will be inserted here dynamically -->
      </div>

      <div id="cart-empty" class="cart-empty">
        <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="9" cy="21" r="1"></circle>
          <circle cx="20" cy="21" r="1"></circle>
          <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
        </svg>
        <p>Tu carrito está vacío</p>
      </div>
    </div>

    <div class="cart-footer">
      <div class="cart-summary">
        <div class="summary-row">
          <span class="summary-label">Subtotal</span>
          <span id="cart-subtotal" class="summary-value">$0</span>
        </div>
      </div>

      <button id="checkout-btn" class="btn-checkout">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M10 2h4"></path>
          <path d="M4.6 11a8 8 0 0 0 14.8 0"></path>
          <path d="M12 14v6"></path>
          <circle cx="12" cy="12" r="10"></circle>
        </svg>
        Proceder al Pago
      </button>

      <p class="shipping-note">Envío gratis en compras superiores a $500.000</p>
    </div>
  </div>
</div>

<style>
  .cart-modal {
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 9999;
    display: none;
    opacity: 0;
    transition: opacity var(--transition-base);
  }

  .cart-modal.active {
    display: block;
    opacity: 1;
  }

  .cart-overlay {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
  }

  .cart-container {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    width: 100%;
    max-width: 420px;
    background: var(--color-white);
    box-shadow: -4px 0 24px rgba(0, 0, 0, 0.15);
    display: flex;
    flex-direction: column;
    transform: translateX(100%);
    transition: transform var(--transition-base);
  }

  .cart-modal.active .cart-container {
    transform: translateX(0);
  }

  /* Header */
  .cart-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: var(--spacing-6);
    border-bottom: 1px solid var(--color-gray-200);
  }

  .cart-title {
    font-size: var(--text-xl);
    font-weight: var(--font-bold);
    color: var(--color-black);
    margin: 0;
  }

  .cart-close {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
    border: none;
    background: transparent;
    color: var(--color-gray-600);
    cursor: pointer;
    border-radius: var(--radius-md);
    transition: all var(--transition-fast);
  }

  .cart-close:hover {
    background: var(--color-gray-100);
    color: var(--color-black);
  }

  /* Content */
  .cart-content {
    flex: 1;
    overflow-y: auto;
    padding: var(--spacing-6);
  }

  .cart-items {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-4);
  }

  .cart-empty {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: var(--spacing-12) var(--spacing-6);
    color: var(--color-gray-400);
    text-align: center;
    min-height: 300px;
  }

  .cart-empty svg {
    margin-bottom: var(--spacing-4);
  }

  .cart-empty p {
    margin: 0;
    font-size: var(--text-lg);
    color: var(--color-gray-500);
  }

  /* Cart Item */
  .cart-item {
    display: flex;
    gap: var(--spacing-4);
    padding: var(--spacing-4);
    background: var(--color-gray-50);
    border-radius: var(--radius-lg);
    position: relative;
  }

  .cart-item-image {
    width: 80px;
    height: 80px;
    flex-shrink: 0;
    background: linear-gradient(135deg, #FAFAFA 0%, #F4F4F5 100%);
    border-radius: var(--radius-md);
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--spacing-2);
  }

  .cart-item-image img {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .cart-item-details {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: var(--spacing-2);
  }

  .cart-item-name {
    font-size: var(--text-sm);
    font-weight: var(--font-semibold);
    color: var(--color-black);
    margin: 0;
    line-height: 1.3;
  }

  .cart-item-model {
    font-size: var(--text-xs);
    color: var(--color-gray-500);
    margin: 0;
  }

  .cart-item-footer {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-top: auto;
  }

  .cart-item-quantity {
    display: flex;
    align-items: center;
    gap: var(--spacing-2);
    background: var(--color-white);
    border-radius: var(--radius-md);
    padding: var(--spacing-1);
  }

  .quantity-btn {
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    border: none;
    background: transparent;
    color: var(--color-gray-600);
    cursor: pointer;
    border-radius: var(--radius-sm);
    font-size: var(--text-lg);
    transition: all var(--transition-fast);
  }

  .quantity-btn:hover {
    background: var(--color-gray-100);
    color: var(--color-black);
  }

  .quantity-value {
    min-width: 28px;
    text-align: center;
    font-size: var(--text-sm);
    font-weight: var(--font-semibold);
    color: var(--color-black);
  }

  .cart-item-price {
    font-size: var(--text-base);
    font-weight: var(--font-bold);
    color: var(--color-black);
  }

  .cart-item-remove {
    position: absolute;
    top: var(--spacing-2);
    right: var(--spacing-2);
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    border: none;
    background: transparent;
    color: var(--color-gray-400);
    cursor: pointer;
    border-radius: var(--radius-sm);
    transition: all var(--transition-fast);
  }

  .cart-item-remove:hover {
    background: var(--color-white);
    color: var(--color-gray-700);
  }

  /* Footer */
  .cart-footer {
    padding: var(--spacing-6);
    border-top: 1px solid var(--color-gray-200);
    background: var(--color-white);
  }

  .cart-summary {
    margin-bottom: var(--spacing-5);
  }

  .summary-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-3) 0;
  }

  .summary-label {
    font-size: var(--text-base);
    color: var(--color-gray-600);
    font-weight: var(--font-medium);
  }

  .summary-value {
    font-size: var(--text-xl);
    font-weight: var(--font-bold);
    color: var(--color-black);
  }

  .btn-checkout {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-2);
    padding: var(--spacing-4);
    background: var(--color-primary);
    color: var(--color-black);
    border: none;
    border-radius: var(--radius-lg);
    font-size: var(--text-base);
    font-weight: var(--font-bold);
    cursor: pointer;
    transition: all var(--transition-base);
    box-shadow: 0 2px 8px rgba(255, 215, 0, 0.3);
  }

  .btn-checkout:hover {
    background: var(--color-primary-dark);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(255, 215, 0, 0.4);
  }

  .btn-checkout:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .shipping-note {
    margin-top: var(--spacing-3);
    text-align: center;
    font-size: var(--text-xs);
    color: var(--color-gray-500);
  }

  /* Responsive */
  @media (max-width: 640px) {
    .cart-container {
      max-width: 100%;
    }

    .cart-item-image {
      width: 64px;
      height: 64px;
    }
  }

  /* Scrollbar styling */
  .cart-content::-webkit-scrollbar {
    width: 8px;
  }

  .cart-content::-webkit-scrollbar-track {
    background: transparent;
  }

  .cart-content::-webkit-scrollbar-thumb {
    background: var(--color-gray-300);
    border-radius: var(--radius-full);
  }

  .cart-content::-webkit-scrollbar-thumb:hover {
    background: var(--color-gray-400);
  }
</style>

<script>
  // Cart functionality
  interface CartItem {
    id: string;
    name: string;
    model: string;
    price: number;
    image?: string;
    quantity: number;
  }

  class Cart {
    private items: CartItem[] = [];
    private modal: HTMLElement | null = null;
    private overlay: HTMLElement | null = null;
    private itemsContainer: HTMLElement | null = null;
    private emptyState: HTMLElement | null = null;
    private subtotalElement: HTMLElement | null = null;
    private checkoutBtn: HTMLElement | null = null;

    constructor() {
      this.init();
    }

    private init() {
      // Get DOM elements
      this.modal = document.getElementById('cart-modal');
      this.overlay = this.modal?.querySelector('.cart-overlay') || null;
      this.itemsContainer = document.getElementById('cart-items');
      this.emptyState = document.getElementById('cart-empty');
      this.subtotalElement = document.getElementById('cart-subtotal');
      this.checkoutBtn = document.getElementById('checkout-btn');

      // Load cart from localStorage
      this.loadCart();

      // Setup event listeners
      this.setupEventListeners();

      // Initial render
      this.render();
    }

    private setupEventListeners() {
      // Close modal
      const closeBtn = this.modal?.querySelector('.cart-close');
      closeBtn?.addEventListener('click', () => this.close());
      this.overlay?.addEventListener('click', () => this.close());

      // Cart toggle buttons
      document.querySelectorAll('[data-cart-toggle]').forEach(btn => {
        btn.addEventListener('click', () => this.toggle());
      });

      // Add to cart buttons
      document.querySelectorAll('.btn-add-cart').forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();

          const button = e.currentTarget as HTMLElement;
          const card = button.closest('.product-card');

          if (card) {
            const name = card.querySelector('.product-name')?.textContent?.trim() || '';
            const model = card.querySelector('.product-model')?.textContent?.trim() || '';
            const priceText = card.querySelector('.price-amount')?.textContent || '0';
            const price = parseFloat(priceText.replace(/[^\d.-]/g, ''));

            // Get image from the img element or from data attribute
            const imgElement = card.querySelector('.product-image img') as HTMLImageElement;
            const image = imgElement?.src || button.dataset.productImage || undefined;

            const id = button.dataset.productId || `${name}-${model}`.toLowerCase().replace(/\s+/g, '-');

            console.log('Adding to cart:', { id, name, model, price, image });

            this.addItem({
              id,
              name,
              model,
              price,
              image,
              quantity: 1
            });

            this.open();
          }
        });
      });

      // Checkout button
      this.checkoutBtn?.addEventListener('click', () => {
        if (this.items.length > 0) {
          this.openCheckout();
        }
      });
    }

    private openCheckout() {
      // Redirect to checkout page
      window.location.href = '/checkout';
    }

    public addItem(item: CartItem) {
      const existingItem = this.items.find(i => i.id === item.id);

      if (existingItem) {
        existingItem.quantity += item.quantity;
      } else {
        this.items.push(item);
      }

      this.saveCart();
      this.render();
      this.updateCartCount();
    }

    public removeItem(id: string) {
      this.items = this.items.filter(item => item.id !== id);
      this.saveCart();
      this.render();
      this.updateCartCount();
    }

    public updateQuantity(id: string, quantity: number) {
      const item = this.items.find(i => i.id === id);
      if (item) {
        item.quantity = Math.max(0, quantity);
        if (item.quantity === 0) {
          this.removeItem(id);
        } else {
          this.saveCart();
          this.render();
          this.updateCartCount();
        }
      }
    }

    public clear() {
      this.items = [];
      this.saveCart();
      this.render();
      this.updateCartCount();
    }

    private render() {
      if (!this.itemsContainer || !this.emptyState) return;

      if (this.items.length === 0) {
        this.itemsContainer.style.display = 'none';
        this.emptyState.style.display = 'flex';
        this.checkoutBtn?.setAttribute('disabled', 'true');
      } else {
        this.itemsContainer.style.display = 'flex';
        this.emptyState.style.display = 'none';
        this.checkoutBtn?.removeAttribute('disabled');

        this.itemsContainer.innerHTML = this.items.map(item => `
          <div class="cart-item" data-item-id="${item.id}">
            <div class="cart-item-image">
              ${item.image ? `<img src="${item.image}" alt="${item.name}" />` : '<div style="color: var(--color-gray-300);">📦</div>'}
            </div>
            <div class="cart-item-details">
              <h3 class="cart-item-name">${item.name}</h3>
              <p class="cart-item-model">${item.model}</p>
              <div class="cart-item-footer">
                <div class="cart-item-quantity">
                  <button class="quantity-btn quantity-decrease" data-id="${item.id}">−</button>
                  <span class="quantity-value">${item.quantity}</span>
                  <button class="quantity-btn quantity-increase" data-id="${item.id}">+</button>
                </div>
                <span class="cart-item-price">${this.formatPrice(item.price * item.quantity)}</span>
              </div>
            </div>
            <button class="cart-item-remove" data-id="${item.id}" aria-label="Eliminar producto">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
              </svg>
            </button>
          </div>
        `).join('');

        // Setup item event listeners
        this.itemsContainer.querySelectorAll('.quantity-decrease').forEach(btn => {
          btn.addEventListener('click', (e) => {
            const id = (e.currentTarget as HTMLElement).dataset.id;
            const item = this.items.find(i => i.id === id);
            if (item) {
              this.updateQuantity(id!, item.quantity - 1);
            }
          });
        });

        this.itemsContainer.querySelectorAll('.quantity-increase').forEach(btn => {
          btn.addEventListener('click', (e) => {
            const id = (e.currentTarget as HTMLElement).dataset.id;
            const item = this.items.find(i => i.id === id);
            if (item) {
              this.updateQuantity(id!, item.quantity + 1);
            }
          });
        });

        this.itemsContainer.querySelectorAll('.cart-item-remove').forEach(btn => {
          btn.addEventListener('click', (e) => {
            const id = (e.currentTarget as HTMLElement).dataset.id;
            if (id) {
              this.removeItem(id);
            }
          });
        });
      }

      this.updateSubtotal();
    }

    private updateSubtotal() {
      if (!this.subtotalElement) return;

      const subtotal = this.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
      this.subtotalElement.textContent = this.formatPrice(subtotal);
    }

    private formatPrice(price: number): string {
      return `$${price.toFixed(3).replace(/\B(?=(\d{3})+(?!\d))/g, '.')}`;
    }

    private updateCartCount() {
      const count = this.items.reduce((sum, item) => sum + item.quantity, 0);
      const badges = document.querySelectorAll('.cart-badge');
      badges.forEach(badge => {
        badge.textContent = count.toString();
        if (count > 0) {
          badge.classList.add('has-items');
        } else {
          badge.classList.remove('has-items');
        }
      });
    }

    private saveCart() {
      localStorage.setItem('cart', JSON.stringify(this.items));
    }

    private loadCart() {
      try {
        const saved = localStorage.getItem('cart');
        if (saved) {
          this.items = JSON.parse(saved);
        }
      } catch (e) {
        console.error('Error loading cart:', e);
        this.items = [];
      }
    }

    public open() {
      this.modal?.classList.add('active');
      document.body.style.overflow = 'hidden';
    }

    public close() {
      this.modal?.classList.remove('active');
      document.body.style.overflow = '';
    }

    public toggle() {
      if (this.modal?.classList.contains('active')) {
        this.close();
      } else {
        this.open();
      }
    }
  }

  // Initialize cart when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      (window as any).cart = new Cart();
    });
  } else {
    (window as any).cart = new Cart();
  }
</script>
