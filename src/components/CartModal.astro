---
// Modern Cart Modal - Based on clean design reference
---

<!-- Load external CSS -->
<link rel="stylesheet" href="/cart-modal.css">

<div id="cart-modal" class="cart-modal" style="position: fixed; top: 0; right: 0; bottom: 0; left: 0; z-index: 9999; visibility: hidden; opacity: 0;">
  <div class="cart-overlay" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0, 0, 0, 0.4);"></div>
  
  <div class="cart-container" style="position: absolute; top: 0; right: 0; bottom: 0; width: 420px; max-width: 100vw; background: #ffffff; display: flex; flex-direction: column; transform: translateX(100%);">
    <!-- Header -->
    <div class="cart-header" style="display: flex; align-items: center; justify-content: space-between; padding: 20px 24px; border-bottom: 1px solid #e5e7eb; background: #fafafa;">
      <h2 class="cart-title" style="font-size: 18px; font-weight: 600; color: #111827; margin: 0;">Carrito</h2>
      <button class="cart-close" aria-label="Cerrar carrito" style="display: flex; align-items: center; justify-content: center; width: 32px; height: 32px; border: none; background: transparent; color: #6b7280; cursor: pointer; border-radius: 8px;">
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
    </div>

    <!-- Items List -->
    <div class="cart-content" style="flex: 1; overflow-y: auto; padding: 0;">
      <div id="cart-items" class="cart-items" style="display: flex; flex-direction: column;">
        <!-- Items will be rendered here -->
      </div>
      
      <!-- Empty State -->
      <div id="cart-empty" class="cart-empty" style="display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 60px 24px; text-align: center;">
        <div class="empty-icon" style="color: #d1d5db; margin-bottom: 16px;">
          <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="9" cy="21" r="1"></circle>
            <circle cx="20" cy="21" r="1"></circle>
            <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
          </svg>
        </div>
        <p class="empty-text" style="font-size: 16px; color: #6b7280; margin: 0;">Tu carrito está vacío</p>
      </div>
    </div>

    <!-- Summary & Checkout -->
    <div class="cart-footer" style="padding: 20px 24px; border-top: 1px solid #e5e7eb; background: #fafafa;">
      <div class="cart-summary" style="margin-bottom: 16px;">
        <div class="summary-row" style="display: flex; justify-content: space-between; align-items: center;">
          <span class="summary-label" style="font-size: 14px; color: #6b7280; font-weight: 500;">Total:</span>
          <span id="cart-total" class="summary-value" style="font-size: 18px; font-weight: 700; color: #111827;">$0</span>
        </div>
      </div>
      
      <button id="cart-checkout" class="checkout-button" style="width: 100%; display: flex; align-items: center; justify-content: center; gap: 8px; padding: 14px 16px; background: #ff8c00; color: white; border: none; border-radius: 10px; font-size: 14px; font-weight: 600; cursor: pointer; font-family: inherit;">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M9 12l2 2 4-4"></path>
          <circle cx="12" cy="12" r="10"></circle>
        </svg>
Finalizar Compra
      </button>
    </div>
  </div>
</div>

<style>
  /* Modal Base */
  .cart-modal {
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 9999;
    visibility: hidden;
    opacity: 0;
    transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .cart-modal.open {
    visibility: visible;
    opacity: 1;
  }

  .cart-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.4);
    backdrop-filter: blur(4px);
  }

  .cart-container {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    width: 420px;
    max-width: 100vw;
    background: #ffffff;
    display: flex;
    flex-direction: column;
    box-shadow: -2px 0 24px rgba(0, 0, 0, 0.12);
    transform: translateX(100%);
    transition: transform 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .cart-modal.open .cart-container {
    transform: translateX(0);
  }

  /* Header */
  .cart-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 20px 24px;
    border-bottom: 1px solid #e5e7eb;
    flex-shrink: 0;
    background: #fafafa;
  }

  .cart-title {
    font-size: 18px;
    font-weight: 600;
    color: #111827;
    margin: 0;
    letter-spacing: -0.01em;
  }

  .cart-close {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
    border: none;
    background: transparent;
    color: #6b7280;
    cursor: pointer;
    border-radius: 8px;
    transition: all 0.2s ease;
  }

  .cart-close:hover {
    background: #e5e7eb;
    color: #111827;
  }

  /* Content */
  .cart-content {
    flex: 1;
    overflow-y: auto;
    padding: 0;
  }

  .cart-items {
    display: flex;
    flex-direction: column;
  }

  /* Cart Item */
  .cart-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 16px 24px;
    border-bottom: 1px solid #f1f3f4;
    transition: background-color 0.2s ease;
  }

  .cart-item:hover {
    background: #f9fafb;
  }

  .cart-item:last-child {
    border-bottom: none;
  }

  /* Product Image */
  .cart-item-image {
    width: 50px;
    height: 50px;
    flex-shrink: 0;
    background: #ffffff;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .cart-item-image img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    object-position: center;
  }

  .cart-item-image .placeholder {
    color: #9ca3af;
    font-size: 16px;
  }

  /* Product Info */
  .cart-item-info {
    flex: 1;
    min-width: 0;
  }

  .cart-item-name {
    font-size: 14px;
    font-weight: 600;
    color: #111827;
    margin: 0 0 2px 0;
    line-height: 1.3;
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .cart-item-model {
    font-size: 12px;
    color: #6b7280;
    margin: 0;
    line-height: 1.2;
  }

  /* Controls */
  .cart-item-controls {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    gap: 6px;
    flex-shrink: 0;
    position: relative;
  }

  .cart-item-price {
    font-size: 14px;
    font-weight: 700;
    color: #ff8c00;
    margin: 0;
    line-height: 1;
    white-space: nowrap;
  }

  /* Quantity Controls */
  .quantity-controls {
    display: flex;
    align-items: center;
    gap: 4px;
    background: #f3f4f6;
    border-radius: 6px;
    padding: 2px;
  }

  .quantity-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 22px;
    height: 22px;
    border: none;
    background: transparent;
    color: #6b7280;
    cursor: pointer;
    border-radius: 4px;
    font-size: 14px;
    font-weight: 600;
    transition: all 0.2s ease;
  }

  .quantity-btn:hover:not(:disabled) {
    background: #e5e7eb;
    color: #111827;
  }

  .quantity-btn:disabled {
    opacity: 0.4;
    cursor: not-allowed;
  }

  .quantity-display {
    min-width: 24px;
    text-align: center;
    font-size: 13px;
    font-weight: 600;
    color: #111827;
    padding: 0 4px;
  }

  /* Remove Button */
  .remove-btn {
    position: absolute;
    top: -6px;
    right: -6px;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 20px;
    height: 20px;
    background: #ef4444;
    color: white;
    border: none;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 10px;
    z-index: 10;
  }

  .remove-btn:hover {
    background: #dc2626;
    transform: scale(1.1);
  }

  /* Empty State */
  .cart-empty {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 60px 24px;
    text-align: center;
  }

  .empty-icon {
    color: #d1d5db;
    margin-bottom: 16px;
  }

  .empty-text {
    font-size: 16px;
    color: #6b7280;
    margin: 0;
  }

  /* Footer */
  .cart-footer {
    padding: 20px 24px;
    border-top: 1px solid #e5e7eb;
    flex-shrink: 0;
    background: #fafafa;
  }

  .cart-summary {
    margin-bottom: 16px;
  }

  .summary-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .summary-label {
    font-size: 14px;
    color: #6b7280;
    font-weight: 500;
  }

  .summary-value {
    font-size: 18px;
    font-weight: 700;
    color: #111827;
    letter-spacing: -0.01em;
  }

  /* Checkout Button */
  .checkout-button {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    padding: 14px 16px;
    background: #ff8c00;
    color: white;
    border: none;
    border-radius: 10px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    font-family: inherit;
  }

  .checkout-button:hover {
    background: #e67c00;
    transform: translateY(-1px);
  }

  .checkout-button:active {
    transform: translateY(0);
  }

  .checkout-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  /* Mobile Responsive */
  @media (max-width: 640px) {
    .cart-container {
      width: 100vw;
    }
    
    .cart-header,
    .cart-footer {
      padding: 16px 20px;
    }
    
    .cart-item {
      padding: 14px 20px;
      gap: 10px;
    }
    
    .cart-item-image {
      width: 46px;
      height: 46px;
    }
    
    .cart-item-name {
      font-size: 13px;
    }
    
    .cart-item-model {
      font-size: 11px;
    }
    
    .cart-item-price {
      font-size: 13px;
    }
    
    .quantity-btn {
      width: 20px;
      height: 20px;
      font-size: 12px;
    }
    
    .quantity-display {
      font-size: 12px;
      min-width: 20px;
    }
    
    .remove-btn {
      width: 18px;
      height: 18px;
      top: -5px;
      right: -5px;
    }
  }

  /* Scrollbar */
  .cart-content::-webkit-scrollbar {
    width: 4px;
  }

  .cart-content::-webkit-scrollbar-track {
    background: transparent;
  }

  .cart-content::-webkit-scrollbar-thumb {
    background: #d1d5db;
    border-radius: 2px;
  }

  .cart-content::-webkit-scrollbar-thumb:hover {
    background: #9ca3af;
  }
</style>

<script>
  // TypeScript type declarations
  declare global {
    interface Window {
      cartManager: any;
    }
  }
  

  class CartModalUI {
    private modal: HTMLElement | null = null;
    private overlay: HTMLElement | null = null;
    private itemsContainer: HTMLElement | null = null;
    private emptyState: HTMLElement | null = null;
    private totalElement: HTMLElement | null = null;
    private checkoutButton: HTMLElement | null = null;
    private unsubscribe: (() => void) | null = null;
    private lastItemCount: number = 0;
    private renderedItems: Map<string, any> = new Map();

    constructor() {
      console.log('🛒 CartModalUI initialized');
      this.init();
    }

    private init(): void {
      // Get DOM elements
      this.modal = document.getElementById('cart-modal');
      this.overlay = this.modal?.querySelector('.cart-overlay') as HTMLElement;
      this.itemsContainer = document.getElementById('cart-items');
      this.emptyState = document.getElementById('cart-empty');
      this.totalElement = document.getElementById('cart-total');
      this.checkoutButton = document.getElementById('cart-checkout');

      console.log('🛒 CartModal DOM elements:', {
        modal: !!this.modal,
        overlay: !!this.overlay,
        itemsContainer: !!this.itemsContainer,
        emptyState: !!this.emptyState,
        totalElement: !!this.totalElement,
        checkoutButton: !!this.checkoutButton
      });

      // Set up event listeners
      this.setupEventListeners();

      // Set up event delegation for cart item buttons (this works for all items, present and future)
      this.setupCartItemListeners();

      // Subscribe to cart changes
      console.log('🛒 CartModal subscribing to cart changes');
      this.unsubscribe = window.cartManager.subscribe((state: any) => {
        console.log('🛒 CartModal received state update:', state);
        this.render(state);
      });
    }

    private setupEventListeners(): void {
      // Close modal events
      const closeBtn = this.modal?.querySelector('.cart-close');
      closeBtn?.addEventListener('click', () => this.close());
      this.overlay?.addEventListener('click', () => this.close());

      // ESC key to close
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.isOpen()) {
          this.close();
        }
      });

      // Checkout button
      this.checkoutButton?.addEventListener('click', () => {
        this.goToCheckout();
      });
    }

    private setupCartItemListeners(): void {
      // Use event delegation - attach ONE listener to the container
      // This listener will work for ALL buttons, even ones added later
      if (!this.itemsContainer) return;

      console.log('🛒 Setting up event delegation for cart item buttons');

      this.itemsContainer.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;

        // Check if clicked element or its parent is a button we care about
        const button = target.closest('button');
        if (!button) return;

        const productId = button.dataset.id;
        if (!productId) {
          console.warn('⚠️ Button clicked but no productId found!', button);
          return;
        }

        e.preventDefault();
        e.stopPropagation();

        console.log('🛒 Button clicked with productId:', productId, 'type:', typeof productId);
        console.log('🛒 Button dataset:', button.dataset);
        console.log('🛒 Button element:', button);

        // Handle different button types
        if (button.classList.contains('remove-btn')) {
          console.log('🛒 Remove button clicked for product:', productId);
          const currentItems = window.cartManager.getItems();
          console.log('🛒 Current cart items before removal:', currentItems);
          console.log('🛒 Number of items:', currentItems.length);
          console.log('🛒 Item IDs:', currentItems.map((item: any) => item.id));

          if (currentItems.length === 0) {
            console.error('❌ ERROR: Cart is already empty before calling removeProduct!');
            return;
          }

          // Remove the product immediately without visual feedback
          window.cartManager.removeProduct(productId);
        } else if (button.classList.contains('quantity-btn')) {
          if (button.classList.contains('plus')) {
            console.log('🛒 Plus button clicked for product:', productId);
            const currentItem = window.cartManager.getItems().find((item: any) => item.id === productId);
            if (currentItem) {
              window.cartManager.updateQuantity(productId, currentItem.quantity + 1);
            }
          } else if (button.classList.contains('minus')) {
            console.log('🛒 Minus button clicked for product:', productId);
            const currentItem = window.cartManager.getItems().find((item: any) => item.id === productId);
            if (currentItem) {
              if (currentItem.quantity <= 1) {
                console.log('🛒 Removing product (quantity was 1):', productId);
                window.cartManager.removeProduct(productId);
              } else {
                window.cartManager.updateQuantity(productId, currentItem.quantity - 1);
              }
            }
          }
        }
      });

      console.log('🛒 Event delegation setup complete');
    }

    private render(state: any): void {
      if (!this.itemsContainer || !this.emptyState || !this.totalElement) return;

      console.log('🛒 CartModal render called with state:', state);
      console.log('🛒 CartModal items length:', state.items.length);
      console.log('🛒 CartModal lastItemCount:', this.lastItemCount);

      // Update modal visibility
      if (state.isOpen) {
        this.modal?.classList.add('open');
        document.body.style.overflow = 'hidden';
      } else {
        this.modal?.classList.remove('open');
        document.body.style.overflow = '';
      }

      // Use the state directly instead of calling getItems again
      // This ensures we're working with the most recent state
      const items = state.items;
      console.log('🛒 CartModal using state items:', items);
      console.log('🛒 CartModal items length from state:', items.length);

      if (items.length === 0) {
        console.log('🛒 CartModal: Showing empty state');
        this.itemsContainer!.style.display = 'none';
        this.emptyState!.style.display = 'flex';
        if (this.checkoutButton) (this.checkoutButton as HTMLButtonElement).disabled = true;
        this.renderedItems.clear();
        this.lastItemCount = 0;
      } else {
        console.log('🛒 CartModal: Showing items');
        this.itemsContainer!.style.display = 'block';
        this.emptyState!.style.display = 'none';
        if (this.checkoutButton) (this.checkoutButton as HTMLButtonElement).disabled = false;

        // Check if we need to re-render (smart rendering to avoid flickering)
        const needsFullRender = this.shouldFullRender(items);
        console.log('🛒 CartModal needsFullRender:', needsFullRender);
        
        if (needsFullRender) {
          this.fullRender(items);
        } else {
          this.updateExistingItems(items);
        }
      }

      // Update total
      this.totalElement!.textContent = window.cartManager.formatPrice(state.total);
    }

    private shouldFullRender(items: any[]): boolean {
      // Full render if items added/removed or if first render
      if (items.length !== this.lastItemCount || this.renderedItems.size === 0) {
        this.lastItemCount = items.length;
        return true;
      }
      
      // Check if any new items
      for (const item of items) {
        if (!this.renderedItems.has(item.id)) {
          return true;
        }
      }
      
      return false;
    }

    private fullRender(items: any[]): void {
      this.itemsContainer!.innerHTML = items.map((item: any) => `
        <div class="cart-item" data-id="${item.id}" style="display: flex !important; align-items: center !important; gap: 12px !important; padding: 16px 24px !important; border-bottom: 1px solid #f1f3f4 !important; position: relative !important;">
          <div class="cart-item-image" style="width: 50px !important; height: 50px !important; flex-shrink: 0 !important; background: #ffffff !important; border: 1px solid #e5e7eb !important; border-radius: 8px !important; overflow: hidden !important; display: flex !important; align-items: center !important; justify-content: center !important;">
            ${item.image 
              ? `<img src="${item.image}" alt="${item.name}" style="width: 100% !important; height: 100% !important; object-fit: contain !important; object-position: center !important;" loading="lazy" />`
              : '<div class="placeholder" style="color: #9ca3af !important; font-size: 16px !important;">📦</div>'
            }
          </div>
          <div class="cart-item-info" style="flex: 1 !important; min-width: 0 !important; padding-right: 8px !important; display: flex !important; flex-direction: column !important; justify-content: center !important;">
            <div class="cart-item-name" style="font-size: 14px !important; font-weight: 600 !important; color: #111827 !important; margin: 0 0 4px 0 !important; line-height: 1.3 !important; display: -webkit-box !important; -webkit-line-clamp: 2 !important; -webkit-box-orient: vertical !important; overflow: hidden !important;">${item.name}</div>
            <div class="cart-item-model" style="font-size: 12px !important; color: #6b7280 !important; margin: 0 0 8px 0 !important; line-height: 1.2 !important;">${item.model}</div>
            <div class="cart-item-price" data-price="${item.price * item.quantity}" style="font-size: 15px !important; font-weight: 700 !important; color: #ff8c00 !important; margin: 0 !important; line-height: 1 !important;">${window.cartManager.formatPrice(item.price * item.quantity)}</div>
          </div>
          <div class="cart-item-controls" style="display: flex !important; flex-direction: column !important; align-items: center !important; justify-content: center !important; gap: 8px !important; flex-shrink: 0 !important; min-width: 80px !important; height: 50px !important;">
            <button class="remove-btn" data-id="${item.id}" title="Eliminar producto" style="display: flex !important; align-items: center !important; justify-content: center !important; width: 26px !important; height: 20px !important; background: #ef4444 !important; color: white !important; border: none !important; border-radius: 4px !important; cursor: pointer !important; font-size: 10px !important; font-weight: 500 !important; transition: all 0.2s ease !important;">✕</button>
            <div class="quantity-controls" style="display: flex !important; align-items: center !important; gap: 2px !important; background: #f3f4f6 !important; border-radius: 6px !important; padding: 2px !important;">
              <button class="quantity-btn minus" data-id="${item.id}" ${item.quantity <= 1 ? 'disabled' : ''} style="display: flex !important; align-items: center !important; justify-content: center !important; width: 22px !important; height: 22px !important; border: none !important; background: transparent !important; color: #6b7280 !important; cursor: pointer !important; border-radius: 4px !important; font-size: 14px !important; font-weight: 600 !important;">−</button>
              <span class="quantity-display" data-quantity="${item.quantity}" style="min-width: 26px !important; text-align: center !important; font-size: 13px !important; font-weight: 600 !important; color: #111827 !important; padding: 0 4px !important;">${item.quantity}</span>
              <button class="quantity-btn plus" data-id="${item.id}" style="display: flex !important; align-items: center !important; justify-content: center !important; width: 22px !important; height: 22px !important; border: none !important; background: transparent !important; color: #6b7280 !important; cursor: pointer !important; border-radius: 4px !important; font-size: 14px !important; font-weight: 600 !important;">+</button>
            </div>
          </div>
        </div>
      `).join('');
      
      // Update rendered items cache
      this.renderedItems.clear();
      items.forEach(item => this.renderedItems.set(item.id, item));

      // No need to attach event listeners - we're using event delegation
    }

    private updateExistingItems(items: any[]): void {
      // Only update quantities and prices without full re-render
      items.forEach(item => {
        const quantityEl = this.itemsContainer?.querySelector(`[data-id="${item.id}"] .quantity-display`);
        const priceEl = this.itemsContainer?.querySelector(`[data-id="${item.id}"] .cart-item-price`);
        const minusBtn = this.itemsContainer?.querySelector(`[data-id="${item.id}"] .quantity-btn.minus`) as HTMLButtonElement;
        
        if (quantityEl && quantityEl.getAttribute('data-quantity') !== item.quantity.toString()) {
          quantityEl.textContent = item.quantity.toString();
          quantityEl.setAttribute('data-quantity', item.quantity.toString());
        }
        
        if (priceEl) {
          const newPrice = item.price * item.quantity;
          if (priceEl.getAttribute('data-price') !== newPrice.toString()) {
            priceEl.textContent = window.cartManager.formatPrice(newPrice);
            priceEl.setAttribute('data-price', newPrice.toString());
          }
        }
        
        if (minusBtn) {
          if (item.quantity <= 1) {
            minusBtn.disabled = true;
          } else {
            minusBtn.disabled = false;
          }
        }
        
        this.renderedItems.set(item.id, item);
      });
    }

    private goToCheckout(): void {
      // Close modal and navigate to checkout page
      this.close();
      window.location.href = '/comprar';
    }

    public open(): void {
      window.cartManager.openCart();
    }

    public close(): void {
      window.cartManager.closeCart();
    }

    public isOpen(): boolean {
      return this.modal?.classList.contains('open') ?? false;
    }

    public destroy(): void {
      if (this.unsubscribe) {
        this.unsubscribe();
      }
    }
  }

  // Initialize when CartManager is ready
  const initCartModal = (retryCount = 0) => {
    if (window.cartManager) {
      console.log('🛒 CartModal: CartManager found, initializing');
      new CartModalUI();
    } else if (retryCount < 100) { // Max 5 seconds of retries
      console.log(`🛒 CartModal: Waiting for CartManager... ${retryCount + 1}/100`);
      setTimeout(() => initCartModal(retryCount + 1), 50);
    } else {
      console.error('⚠️ CartModal: CartManager failed to initialize after 5 seconds');
    }
  };
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      initCartModal();
    });
  } else {
    initCartModal();
  }
</script>