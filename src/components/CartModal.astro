---
// Modern Cart Modal - Based on clean design reference
---

<!-- Load external CSS -->
<link rel="stylesheet" href="/cart-modal.css">

<div id="cart-modal" class="cart-modal">
  <div class="cart-overlay"></div>
  
  <div class="cart-container">
    <!-- Header -->
    <div class="cart-header" style="display: flex; align-items: center; justify-content: space-between; padding: 20px 24px; border-bottom: 2px solid #FFD02F; background: linear-gradient(135deg, #1a1a2e 0%, #2d2d44 100%);">
      <h2 class="cart-title" style="font-size: 18px; font-weight: 600; color: #FFD02F; margin: 0; display: flex; align-items: center; gap: 8px;">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="9" cy="21" r="1"></circle>
          <circle cx="20" cy="21" r="1"></circle>
          <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
        </svg>
        Mi Carrito
      </h2>
      <button class="cart-close" aria-label="Cerrar carrito" style="display: flex; align-items: center; justify-content: center; width: 32px; height: 32px; border: none; background: rgba(255, 255, 255, 0.1); color: #FFD02F; cursor: pointer; border-radius: 8px; transition: all 0.3s;">
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
    </div>

    <!-- Items List -->
    <div class="cart-content">
      <div id="cart-items" class="cart-items">
        <!-- Items will be rendered here -->
      </div>
      
      <!-- Empty State -->
      <div id="cart-empty" class="cart-empty">
        <div class="empty-icon">
          <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="9" cy="21" r="1"></circle>
            <circle cx="20" cy="21" r="1"></circle>
            <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
          </svg>
        </div>
        <p class="empty-text">Tu carrito est√° vac√≠o</p>
      </div>
    </div>

    <!-- Summary & Checkout -->
    <div class="cart-footer" style="padding: 20px 24px; border-top: 2px solid #FFD02F; background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);">
      <div class="cart-summary" style="margin-bottom: 16px;">
        <div class="summary-row" style="display: flex; justify-content: space-between; align-items: center;">
          <span class="summary-label" style="font-size: 14px; color: #1a1a2e; font-weight: 600;">Total:</span>
          <span id="cart-total" class="summary-value" style="font-size: 20px; font-weight: 700; color: #1a1a2e;">$0</span>
        </div>
      </div>

      <button id="cart-checkout" class="checkout-button" style="width: 100%; display: flex; align-items: center; justify-content: center; gap: 8px; padding: 14px 16px; background: linear-gradient(135deg, #FFD02F 0%, #FFC700 100%); color: #1a1a2e; border: none; border-radius: 10px; font-size: 15px; font-weight: 700; cursor: pointer; font-family: inherit; box-shadow: 0 4px 12px rgba(255, 208, 47, 0.3); transition: all 0.3s;">
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M9 12l2 2 4-4"></path>
          <circle cx="12" cy="12" r="10"></circle>
        </svg>
        Finalizar Compra
      </button>
    </div>
  </div>
</div>

<style>
  .checkout-button:hover {
    background: linear-gradient(135deg, #FFC700 0%, #FFB700 100%) !important;
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(255, 208, 47, 0.4) !important;
  }

  .checkout-button:active {
    transform: translateY(0);
  }

  .checkout-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none !important;
  }

  /* Cart Item Image Styling */
  .cart-item-image {
    width: 64px !important;
    height: 64px !important;
    min-width: 64px !important;
    min-height: 64px !important;
    max-width: 64px !important;
    max-height: 64px !important;
    background: linear-gradient(135deg, #FAFAFA 0%, #F4F4F5 100%);
    border-radius: 8px;
    overflow: hidden !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    flex-shrink: 0 !important;
    border: 1px solid #e5e7eb;
    position: relative;
  }

  .cart-item-image img {
    width: 100% !important;
    height: 100% !important;
    min-width: auto !important;
    min-height: auto !important;
    max-width: 100% !important;
    max-height: 100% !important;
    object-fit: contain !important;
    object-position: center !important;
    padding: 4px !important;
    display: block !important;
    margin: 0 !important;
  }

  .cart-item-image .placeholder {
    font-size: 24px;
    color: #9ca3af;
  }
</style>

<script>
  // TypeScript type declarations
  declare global {
    interface Window {
      cartManager: any;
    }
  }
  

  class CartModalUI {
    private modal: HTMLElement | null = null;
    private overlay: HTMLElement | null = null;
    private itemsContainer: HTMLElement | null = null;
    private emptyState: HTMLElement | null = null;
    private totalElement: HTMLElement | null = null;
    private checkoutButton: HTMLElement | null = null;
    private unsubscribe: (() => void) | null = null;

    constructor() {
      console.log('üõí CartModalUI initialized');
      this.init();
    }

    private init(): void {
      // Get DOM elements
      this.modal = document.getElementById('cart-modal');
      this.overlay = this.modal?.querySelector('.cart-overlay') as HTMLElement;
      this.itemsContainer = document.getElementById('cart-items');
      this.emptyState = document.getElementById('cart-empty');
      this.totalElement = document.getElementById('cart-total');
      this.checkoutButton = document.getElementById('cart-checkout');

      console.log('üõí CartModal DOM elements:', {
        modal: !!this.modal,
        overlay: !!this.overlay,
        itemsContainer: !!this.itemsContainer,
        emptyState: !!this.emptyState,
        totalElement: !!this.totalElement,
        checkoutButton: !!this.checkoutButton
      });

      // Set up event listeners
      this.setupEventListeners();

      // Set up event delegation for cart item buttons (this works for all items, present and future)
      this.setupCartItemListeners();

      // Subscribe to cart changes
      console.log('üõí CartModal subscribing to cart changes');
      this.unsubscribe = window.cartManager.subscribe((state: any) => {
        console.log('üõí CartModal received state update:', state);
        this.render(state);
      });
    }

    private setupEventListeners(): void {
      // Close modal events
      const closeBtn = this.modal?.querySelector('.cart-close');
      closeBtn?.addEventListener('click', () => this.close());
      this.overlay?.addEventListener('click', () => this.close());

      // ESC key to close
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.isOpen()) {
          this.close();
        }
      });

      // Checkout button
      this.checkoutButton?.addEventListener('click', () => {
        this.goToCheckout();
      });
    }

    private setupCartItemListeners(): void {
      // Use event delegation - attach ONE listener to the container
      // This listener will work for ALL buttons, even ones added later
      if (!this.itemsContainer) return;

      console.log('üõí Setting up event delegation for cart item buttons');

      this.itemsContainer.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;

        // Check if clicked element or its parent is a button we care about
        const button = target.closest('button');
        if (!button) return;

        const productId = button.dataset.id;
        if (!productId) {
          console.warn('‚ö†Ô∏è Button clicked but no productId found!', button);
          return;
        }

        e.preventDefault();
        e.stopPropagation();

        console.log('üõí Button clicked with productId:', productId, 'type:', typeof productId);
        console.log('üõí Button dataset:', button.dataset);
        console.log('üõí Button element:', button);

        // Handle different button types
        if (button.classList.contains('remove-btn')) {
          console.log('üõí Remove button clicked for product:', productId);
          const currentItems = window.cartManager.getItems();
          console.log('üõí Current cart items before removal:', currentItems);
          console.log('üõí Number of items:', currentItems.length);
          console.log('üõí Item IDs:', currentItems.map((item: any) => item.id));

          if (currentItems.length === 0) {
            console.error('‚ùå ERROR: Cart is already empty before calling removeProduct!');
            return;
          }

          // Remove the product immediately without visual feedback
          window.cartManager.removeProduct(productId);
        } else if (button.classList.contains('quantity-btn')) {
          if (button.classList.contains('plus')) {
            console.log('üõí Plus button clicked for product:', productId);
            const currentItem = window.cartManager.getItems().find((item: any) => item.id === productId);
            if (currentItem) {
              window.cartManager.updateQuantity(productId, currentItem.quantity + 1);
            }
          } else if (button.classList.contains('minus')) {
            console.log('üõí Minus button clicked for product:', productId);
            const currentItem = window.cartManager.getItems().find((item: any) => item.id === productId);
            if (currentItem) {
              if (currentItem.quantity <= 1) {
                console.log('üõí Removing product (quantity was 1):', productId);
                window.cartManager.removeProduct(productId);
              } else {
                window.cartManager.updateQuantity(productId, currentItem.quantity - 1);
              }
            }
          }
        }
      });

      console.log('üõí Event delegation setup complete');
    }

    private render(state: any): void {
      if (!this.itemsContainer || !this.emptyState || !this.totalElement) return;

      console.log('üõí CartModal render called with state:', state);
      console.log('üõí CartModal items array:', state.items);
      console.log('üõí CartModal items length:', state.items.length);
      console.log('üõí CartModal itemsContainer element:', this.itemsContainer);
      console.log('üõí CartModal emptyState element:', this.emptyState);
      console.log('üõí CartModal emptyState current display:', this.emptyState.style.display);
      console.log('üõí CartModal itemsContainer current display:', this.itemsContainer.style.display);

      // Update modal visibility
      if (state.isOpen) {
        this.modal?.classList.add('open');
        document.body.style.overflow = 'hidden';
      } else {
        this.modal?.classList.remove('open');
        document.body.style.overflow = '';
      }

      // Use the state directly instead of calling getItems again
      // This ensures we're working with the most recent state
      const items = state.items;
      console.log('üõí CartModal using state items:', items);
      console.log('üõí CartModal items length from state:', items.length);

      if (items.length === 0) {
        console.log('üõí CartModal: Mostrando estado vac√≠o - 0 items');
        // Limpiar todos los items del DOM inmediatamente
        this.itemsContainer!.innerHTML = '';
        this.itemsContainer!.style.display = 'none';
        this.itemsContainer!.style.visibility = 'hidden';

        // Mostrar estado vac√≠o
        this.emptyState!.style.display = 'flex';
        this.emptyState!.style.visibility = 'visible';
        if (this.checkoutButton) (this.checkoutButton as HTMLButtonElement).disabled = true;
        console.log('üõí CartModal: Empty state display set to:', this.emptyState.style.display);
        console.log('üõí CartModal: Items container display set to:', this.itemsContainer.style.display);
      } else {
        console.log(`üõí CartModal: Mostrando ${items.length} items`);

        // Ocultar estado vac√≠o PRIMERO
        this.emptyState!.style.display = 'none';
        this.emptyState!.style.visibility = 'hidden';

        // Mostrar contenedor de items
        this.itemsContainer!.style.display = 'flex';
        this.itemsContainer!.style.flexDirection = 'column';
        this.itemsContainer!.style.visibility = 'visible';
        if (this.checkoutButton) (this.checkoutButton as HTMLButtonElement).disabled = false;
        console.log('üõí CartModal: Empty state display set to:', this.emptyState.style.display);
        console.log('üõí CartModal: Items container display set to:', this.itemsContainer.style.display);

        // Siempre hacer un render completo para evitar bugs visuales
        this.renderItems(items);
      }

      // Update total
      this.totalElement.textContent = window.cartManager.formatPrice(state.total);
    }

    private renderItems(items: any[]): void {
      console.log('üõí CartModal: Rendering items:', items);
      
      // Simple, reliable rendering - always re-render completely  
      console.log('üõí CartModal: About to render HTML structure');
      
      const htmlContent = items.map((item: any) => {
        const itemHtml = `
        <div class="cart-item" data-id="${item.id}" style="position: relative; display: flex; align-items: center; gap: 12px; padding: 16px 40px 16px 24px; border-bottom: 1px solid #f1f3f4;">
          <div class="cart-item-image">
            ${item.image 
              ? `<img src="${item.image}" alt="${item.name}" />`
              : '<div class="placeholder">üì¶</div>'
            }
          </div>
          <div class="cart-item-info">
            <div class="cart-item-name">${item.name}</div>
            <div class="cart-item-model">${item.model}</div>
          </div>
          <div class="cart-item-actions" style="display: flex; flex-direction: column; align-items: flex-end; gap: 4px; flex-shrink: 0; min-width: 80px;">
            <div class="cart-item-header" style="display: flex; justify-content: flex-end; width: 100%; height: 20px;">
              <button class="remove-btn" data-id="${item.id}" title="Eliminar producto" style="display: flex; align-items: center; justify-content: center; width: 20px; height: 20px; background: #ef4444; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 12px; font-weight: 700; line-height: 1;">
                √ó
              </button>
            </div>
            <div class="cart-item-controls" style="display: flex; flex-direction: column; align-items: flex-end; gap: 6px; width: 100%;">
              <div class="cart-item-price">${window.cartManager.formatPrice(item.price * item.quantity)}</div>
              <div class="quantity-controls">
                <button class="quantity-btn minus" data-id="${item.id}" ${item.quantity <= 1 ? 'disabled' : ''}>‚àí</button>
                <span class="quantity-display">${item.quantity}</span>
                <button class="quantity-btn plus" data-id="${item.id}">+</button>
              </div>
            </div>
          </div>
        </div>`;
        console.log('üõí CartModal: Generated HTML for item:', item.id);
        return itemHtml;
      }).join('');
      
      this.itemsContainer!.innerHTML = htmlContent;
      console.log('üõí CartModal: HTML content applied to container');
      console.log('üõí CartModal: itemsContainer parent:', this.itemsContainer?.parentElement?.className);
      
      console.log('üõí CartModal: Items rendered successfully');
    }

    private goToCheckout(): void {
      // Close modal and navigate to checkout page
      this.close();
      window.location.href = '/comprar';
    }

    public open(): void {
      window.cartManager.openCart();
    }

    public close(): void {
      window.cartManager.closeCart();
    }

    public isOpen(): boolean {
      return this.modal?.classList.contains('open') ?? false;
    }

    public destroy(): void {
      if (this.unsubscribe) {
        this.unsubscribe();
      }
    }
  }

  // Initialize when CartManager is ready
  const initCartModal = (retryCount = 0) => {
    if (window.cartManager) {
      console.log('üõí CartModal: CartManager found, initializing');
      new CartModalUI();
    } else if (retryCount < 100) { // Max 5 seconds of retries
      console.log(`üõí CartModal: Waiting for CartManager... ${retryCount + 1}/100`);
      setTimeout(() => initCartModal(retryCount + 1), 50);
    } else {
      console.error('‚ö†Ô∏è CartModal: CartManager failed to initialize after 5 seconds');
    }
  };
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      initCartModal();
    });
  } else {
    initCartModal();
  }
</script>