---
// Hero Section - Carousel Background
import { supabase, getPublicUrl, type Carrusel } from '../lib/supabase';

// Obtener imágenes del carrusel desde Supabase
const { data: carruselFromDB, error } = await supabase
  .from('carrusel')
  .select('*')
  .eq('activo', true)
  .order('orden', { ascending: true });

// Imágenes por defecto si no hay en Supabase
const imagenesDefault: Carrusel[] = [
  {
    id: '1',
    titulo: 'Hidrolavadora KÄRCHER',
    descripcion: 'Team Service Costa',
    imagen_url: '/images/inicio/image.png',
    orden: 1,
    activo: true
  },
  {
    id: '2',
    titulo: 'Equipos de limpieza profesional KÄRCHER',
    descripcion: null,
    imagen_url: '/images/inicio/image2.jpg',
    orden: 2,
    activo: true
  },
  {
    id: '3',
    titulo: 'Servicio técnico autorizado KÄRCHER',
    descripcion: null,
    imagen_url: '/images/inicio/image3.jpg',
    orden: 3,
    activo: true
  }
];

let imagenes: Carrusel[] = imagenesDefault;
if (!error && carruselFromDB && carruselFromDB.length > 0) {
  imagenes = carruselFromDB;
}
---

<section class="hero">
  <!-- Background Carousel -->
  <div class="hero-carousel">
    {imagenes.map((imagen, index) => (
      <div class={`carousel-slide ${index === 0 ? 'active' : ''}`} data-slide={index}>
        <img src={getPublicUrl(imagen.imagen_url)} alt={imagen.titulo + (imagen.descripcion ? ' - ' + imagen.descripcion : '')} loading={index === 0 ? 'eager' : 'lazy'}>
        <div class="carousel-overlay"></div>
      </div>
    ))}
  </div>

  <!-- Carousel Controls -->
  <button class="carousel-control prev" aria-label="Anterior">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round">
      <polyline points="15 18 9 12 15 6"></polyline>
    </svg>
  </button>
  <button class="carousel-control next" aria-label="Siguiente">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round">
      <polyline points="9 18 15 12 9 6"></polyline>
    </svg>
  </button>

  <!-- Carousel Indicators -->
  <div class="carousel-indicators">
    {imagenes.map((_, index) => (
      <button
        class={`indicator ${index === 0 ? 'active' : ''}`}
        data-slide-to={index}
        aria-label={`Ir a imagen ${index + 1}`}>
      </button>
    ))}
  </div>

  <!-- Hero Content -->
  <div class="container">
    <div class="hero-content">
      <div class="hero-text">
        <h1 class="hero-title">
          Potencia, limpieza y confianza con <span class="text-highlight">respaldo oficial</span>
        </h1>
        <p class="hero-description">
          Somos centro autorizado y distribuidor oficial de Karcher y Makita en la región Caribe.
          Equipos profesionales, mantenimiento especializado y asesoría técnica certificada.
        </p>
        <div class="hero-actions">
          <a href="/tienda" class="btn btn-primary">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="9" cy="21" r="1"></circle>
              <circle cx="20" cy="21" r="1"></circle>
              <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
            </svg>
            Ver productos
          </a>
          <a href="#servicios" class="btn btn-secondary">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"></path>
            </svg>
            Nuestros servicios
          </a>
        </div>
        <div class="hero-trust">
          <div class="trust-badges">
            <div class="trust-badge">
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round">
                <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                <polyline points="22 4 12 14.01 9 11.01"></polyline>
              </svg>
              <span>Centro Autorizado</span>
            </div>
            <div class="trust-badge">
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round">
                <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path>
              </svg>
              <span>Garantía Oficial</span>
            </div>
            <div class="trust-badge">
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round">
                <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                <circle cx="12" cy="10" r="3"></circle>
              </svg>
              <span>3 sedes: Montería · Cartagena · Apartadó</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .hero {
    position: relative;
    min-height: 500px;
    display: flex;
    align-items: center;
    overflow: hidden;
    background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
  }

  /* Carousel Styles */
  .hero-carousel {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
  }

  .carousel-slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 1s ease-in-out, transform 1s ease-in-out;
    transform: scale(1.1);
  }

  .carousel-slide.active {
    opacity: 1;
    transform: scale(1);
    z-index: 1;
  }

  .carousel-slide img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    filter: brightness(0.7);
  }

  .carousel-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      135deg,
      rgba(26, 26, 46, 0.85) 0%,
      rgba(22, 33, 62, 0.75) 40%,
      rgba(0, 0, 0, 0.6) 100%
    );
    z-index: 1;
  }

  /* Carousel Controls */
  .carousel-control {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    z-index: 10;
    background: rgba(255, 255, 255, 0.15);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    width: 48px;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--color-white);
    cursor: pointer;
    transition: all 0.3s ease;
    opacity: 0;
  }

  .hero:hover .carousel-control {
    opacity: 1;
  }

  .carousel-control:hover {
    background: rgba(255, 255, 255, 0.25);
    border-color: rgba(255, 255, 255, 0.4);
    transform: translateY(-50%) scale(1.1);
  }

  .carousel-control:active {
    transform: translateY(-50%) scale(0.95);
  }

  .carousel-control.prev {
    left: 20px;
  }

  .carousel-control.next {
    right: 20px;
  }

  /* Carousel Indicators */
  .carousel-indicators {
    position: absolute;
    bottom: 30px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 10;
    display: flex;
    gap: 12px;
  }

  .indicator {
    width: 40px;
    height: 4px;
    background: rgba(255, 255, 255, 0.3);
    border: none;
    border-radius: 2px;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .indicator::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 0;
    height: 100%;
    background: var(--color-white);
    transition: width 0.3s ease;
  }

  .indicator.active::before {
    width: 100%;
    animation: progress 5s linear;
  }

  .indicator:hover {
    background: rgba(255, 255, 255, 0.5);
  }

  @keyframes progress {
    from {
      width: 0;
    }
    to {
      width: 100%;
    }
  }

  /* Hero Content */
  .container {
    position: relative;
    z-index: 5;
    width: 100%;
  }

  .hero-content {
    position: relative;
    max-width: 750px;
    padding: var(--spacing-12) 0;
    margin-left: 80px;
  }

  .hero-text {
    text-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
  }

  .hero-title {
    font-size: 2.5rem;
    font-weight: var(--font-extrabold);
    line-height: 1.2;
    color: var(--color-white);
    margin-bottom: var(--spacing-5);
    letter-spacing: -0.02em;
  }

  .text-highlight {
    color: var(--color-white);
    position: relative;
    white-space: nowrap;
  }

  .text-highlight::after {
    content: '';
    position: absolute;
    bottom: 8px;
    left: 0;
    right: 0;
    height: 16px;
    background: #FFD700;
    z-index: -1;
    border-radius: 4px;
    opacity: 0.9;
  }

  .hero-description {
    font-size: var(--text-base);
    line-height: 1.7;
    color: rgba(255, 255, 255, 0.9);
    margin-bottom: var(--spacing-8);
    max-width: 650px;
    font-weight: var(--font-normal);
  }

  .hero-actions {
    display: flex;
    gap: var(--spacing-4);
    margin-bottom: var(--spacing-12);
    flex-wrap: wrap;
  }

  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-2);
    padding: 0.875rem 1.75rem;
    font-size: var(--text-base);
    font-weight: var(--font-semibold);
    border-radius: var(--radius-lg);
    transition: all 0.3s ease;
    cursor: pointer;
    text-decoration: none;
    border: 2px solid transparent;
    white-space: nowrap;
    position: relative;
    overflow: hidden;
  }

  .btn::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.2);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }

  .btn:hover::before {
    width: 300px;
    height: 300px;
  }

  .btn svg {
    position: relative;
    z-index: 1;
  }

  .btn span,
  .btn-primary,
  .btn-secondary {
    position: relative;
    z-index: 1;
  }

  .btn-primary {
    background: #FFD700;
    color: #1a1a2e;
    box-shadow: 0 4px 20px rgba(255, 215, 0, 0.4);
  }

  .btn-primary:hover {
    background: #FFC700;
    transform: translateY(-3px);
    box-shadow: 0 8px 30px rgba(255, 215, 0, 0.5);
  }

  .btn-secondary {
    background: rgba(255, 255, 255, 0.15);
    color: var(--color-white);
    border-color: rgba(255, 255, 255, 0.3);
    backdrop-filter: blur(10px);
  }

  .btn-secondary:hover {
    background: rgba(255, 255, 255, 0.25);
    border-color: rgba(255, 255, 255, 0.5);
    transform: translateY(-2px);
  }

  .hero-trust {
    padding-top: var(--spacing-8);
    border-top: 1px solid rgba(255, 255, 255, 0.2);
  }

  .trust-badges {
    display: flex;
    gap: var(--spacing-8);
    flex-wrap: wrap;
  }

  .trust-badge {
    display: flex;
    align-items: center;
    gap: var(--spacing-2);
    color: rgba(255, 255, 255, 0.95);
    font-size: var(--text-sm);
    font-weight: var(--font-semibold);
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    padding: var(--spacing-2) var(--spacing-4);
    border-radius: var(--radius-full);
    border: 1px solid rgba(255, 255, 255, 0.15);
  }

  .trust-badge svg {
    color: #FFD700;
    filter: drop-shadow(0 0 8px rgba(255, 215, 0, 0.6));
  }

  /* Responsive */
  @media (max-width: 968px) {
    .hero {
      min-height: 480px;
    }

    .hero-title {
      font-size: 2rem;
    }

    .hero-description {
      font-size: var(--text-sm);
    }

    .hero-content {
      padding: var(--spacing-10) 0;
      margin-left: 60px;
    }

    .carousel-control {
      width: 40px;
      height: 40px;
    }

    .carousel-control.prev {
      left: 10px;
    }

    .carousel-control.next {
      right: 10px;
    }
  }

  @media (max-width: 640px) {
    .hero {
      min-height: 520px;
    }

    .hero-title {
      font-size: 1.75rem;
    }

    .hero-content {
      padding: var(--spacing-8) 0;
      margin-left: 50px;
      margin-right: 50px;
    }

    .hero-actions {
      flex-direction: column;
      width: 100%;
    }

    .btn {
      width: 100%;
      padding: 0.75rem 1.5rem;
    }

    .trust-badges {
      flex-direction: column;
      gap: var(--spacing-3);
    }

    .carousel-indicators {
      bottom: 20px;
    }

    .indicator {
      width: 30px;
      height: 3px;
    }

    .carousel-control {
      opacity: 1;
      width: 36px;
      height: 36px;
    }
  }
</style>

<script>
  // Carousel functionality
  interface CarouselState {
    currentSlide: number;
    totalSlides: number;
    autoplayInterval: number | null;
    isTransitioning: boolean;
  }

  const state: CarouselState = {
    currentSlide: 0,
    totalSlides: 0,
    autoplayInterval: null,
    isTransitioning: false
  };

  const slides = document.querySelectorAll<HTMLElement>('.carousel-slide');
  const indicators = document.querySelectorAll<HTMLElement>('.indicator');
  state.totalSlides = slides.length;

  console.log(`🎠 Carrusel inicializado con ${state.totalSlides} slides`);

  function showSlide(index: number, force = false) {
    // Prevenir cambios durante transición (a menos que sea forzado)
    if (state.isTransitioning && !force) {
      console.log('⏸️ Transición en curso, ignorando cambio');
      return;
    }

    // Validar índice
    if (index < 0 || index >= state.totalSlides) {
      console.error(`❌ Índice inválido: ${index}`);
      return;
    }

    // Si ya estamos en este slide, no hacer nada
    if (index === state.currentSlide && !force) {
      console.log(`📍 Ya estamos en slide ${index}`);
      return;
    }

    console.log(`🔄 Cambiando de slide ${state.currentSlide} → ${index}`);

    state.isTransitioning = true;

    // Remover clase active de todos
    slides.forEach(slide => slide.classList.remove('active'));
    indicators.forEach(indicator => indicator.classList.remove('active'));

    // Agregar clase active al slide e indicador actual
    if (slides[index] && indicators[index]) {
      slides[index].classList.add('active');
      indicators[index].classList.add('active');
      state.currentSlide = index;
    } else {
      console.error(`❌ Slide o indicador no encontrado en índice ${index}`);
    }

    // Liberar bandera de transición después de completar
    setTimeout(() => {
      state.isTransitioning = false;
    }, 1000); // Esperar a que termine la transición CSS
  }

  function nextSlide() {
    const next = (state.currentSlide + 1) % state.totalSlides;
    console.log(`➡️ Siguiente slide: ${next}`);
    showSlide(next);
  }

  function prevSlide() {
    const prev = (state.currentSlide - 1 + state.totalSlides) % state.totalSlides;
    console.log(`⬅️ Slide anterior: ${prev}`);
    showSlide(prev);
  }

  function startAutoplay() {
    // Limpiar cualquier intervalo existente
    stopAutoplay();

    console.log('▶️ Iniciando autoplay (cada 5 segundos)');
    state.autoplayInterval = window.setInterval(() => {
      nextSlide();
    }, 5000);
  }

  function stopAutoplay() {
    if (state.autoplayInterval !== null) {
      console.log('⏹️ Deteniendo autoplay');
      clearInterval(state.autoplayInterval);
      state.autoplayInterval = null;
    }
  }

  function resetAutoplay() {
    console.log('🔄 Reiniciando autoplay');
    stopAutoplay();
    startAutoplay();
  }

  // Solo inicializar si hay slides
  if (state.totalSlides > 0) {
    // Event listeners para controles
    const nextBtn = document.querySelector<HTMLElement>('.carousel-control.next');
    const prevBtn = document.querySelector<HTMLElement>('.carousel-control.prev');

    nextBtn?.addEventListener('click', () => {
      console.log('🖱️ Click en botón siguiente');
      nextSlide();
      resetAutoplay();
    });

    prevBtn?.addEventListener('click', () => {
      console.log('🖱️ Click en botón anterior');
      prevSlide();
      resetAutoplay();
    });

    // Event listeners para indicadores
    indicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => {
        console.log(`🖱️ Click en indicador ${index}`);
        showSlide(index);
        resetAutoplay();
      });
    });

    // Pausar en hover
    const heroSection = document.querySelector<HTMLElement>('.hero');
    heroSection?.addEventListener('mouseenter', () => {
      console.log('🖱️ Mouse sobre hero, pausando');
      stopAutoplay();
    });
    heroSection?.addEventListener('mouseleave', () => {
      console.log('🖱️ Mouse fuera de hero, reanudando');
      startAutoplay();
    });

    // Navegación con teclado
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft') {
        console.log('⌨️ Tecla ← presionada');
        prevSlide();
        resetAutoplay();
      } else if (e.key === 'ArrowRight') {
        console.log('⌨️ Tecla → presionada');
        nextSlide();
        resetAutoplay();
      }
    });

    // Pausar cuando la pestaña no está visible
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        console.log('👁️ Pestaña oculta, pausando');
        stopAutoplay();
      } else {
        console.log('👁️ Pestaña visible, reanudando');
        startAutoplay();
      }
    });

    // Iniciar autoplay
    startAutoplay();

    // Asegurar que el primer slide está activo
    showSlide(0, true);
  } else {
    console.error('❌ No se encontraron slides para el carrusel');
  }

  // Limpiar al salir
  window.addEventListener('beforeunload', () => {
    stopAutoplay();
  });
</script>
