---
// ProductCard Component - Miro Style
interface Props {
  name: string;
  model: string;
  price: string;
  image?: string;
  images?: string[];  // Array de todas las im√°genes
  available?: boolean;
  category?: string;
}

const { name, model, price, image, images = [], available = true, category = '' } = Astro.props;

// Generate unique ID from name
const productId = name.toLowerCase().replace(/\s+/g, '-');
---

<div class="product-card product-card-clickable" data-product-id={productId} data-product-card data-category={category.toLowerCase()} data-product-images={JSON.stringify(images)}>
  <div class="product-image" data-product-id={productId} data-has-gallery={images.length > 1 ? 'true' : 'false'}>
    {image ? (
      <img src={image} alt={name} loading="lazy" />
    ) : (
      <div class="image-placeholder">
        <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
          <path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"></path>
        </svg>
      </div>
    )}
    {images.length > 1 && (
      <div class="gallery-indicator">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
          <circle cx="8.5" cy="8.5" r="1.5"></circle>
          <polyline points="21 15 16 10 5 21"></polyline>
        </svg>
        <span>{images.length}</span>
      </div>
    )}
    {!available && (
      <div class="badge badge-unavailable">
        <span class="badge-dot"></span>
        Agotado
      </div>
    )}
    {available && (
      <div class="badge badge-available">
        <span class="badge-dot"></span>
        Disponible
      </div>
    )}
  </div>

  <div class="product-info">
    <div class="product-header">
      <h3 class="product-name">{name}</h3>
      <p class="product-model">{model}</p>
    </div>

    <div class="product-price">
      <span class="price-currency">COP</span>
      <span class="price-amount">$ {price}</span>
    </div>

    <div class="product-actions">
      <button class="btn btn-primary btn-add-cart" data-product-id={productId} data-product-image={image || ''}>
        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="9" cy="21" r="1"></circle>
          <circle cx="20" cy="21" r="1"></circle>
          <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
        </svg>
        <span class="btn-text">Agregar al carrito</span>
      </button>
      <button class="btn btn-secondary view-details-btn" data-id={productId}>Ver detalles</button>
    </div>
  </div>
</div>

<style>
  .product-card {
    background: var(--color-white);
    border: 1px solid var(--color-gray-200);
    border-radius: var(--radius-2xl);
    overflow: hidden;
    transition: all var(--transition-base);
    display: flex;
    flex-direction: column;
    height: 100%;
    position: relative;
  }

  .product-card:hover {
    border-color: var(--color-primary);
    box-shadow: 0 12px 32px -12px rgba(255, 208, 47, 0.25);
    transform: translateY(-8px);
  }

  .product-image {
    position: relative;
    background: linear-gradient(135deg, #FAFAFA 0%, #F4F4F5 100%);
    padding: var(--spacing-4);
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 160px;
    overflow: hidden;
  }

  .product-card-clickable {
    cursor: pointer;
  }

  .product-card-clickable .product-image {
    transition: all var(--transition-base);
  }

  .product-card-clickable:hover .product-image {
    background: linear-gradient(135deg, #F0F0F0 0%, #E8E8E8 100%);
  }

  .product-image::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(255, 208, 47, 0.05) 0%, rgba(255, 208, 47, 0.1) 100%);
    opacity: 0;
    transition: opacity var(--transition-base);
  }

  .product-card:hover .product-image::before {
    opacity: 1;
  }

  .product-image img {
    width: 100%;
    max-width: 120px;
    height: 120px;
    object-fit: cover;
    transition: transform 0.6s cubic-bezier(0.34, 1.56, 0.64, 1);
    position: relative;
    z-index: 1;
    border-radius: var(--radius-md);
  }

  .product-card:hover .product-image img {
    transform: scale(1.1);
  }

  .image-placeholder {
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--color-gray-300);
    padding: var(--spacing-12);
    position: relative;
    z-index: 1;
  }

  .badge {
    position: absolute;
    top: var(--spacing-4);
    right: var(--spacing-4);
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-2);
    padding: var(--spacing-2) var(--spacing-4);
    border-radius: var(--radius-full);
    font-size: var(--text-xs);
    font-weight: var(--font-semibold);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    backdrop-filter: blur(10px);
    z-index: 2;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .badge-dot {
    width: 6px;
    height: 6px;
    border-radius: 50%;
    animation: pulse-dot 2s infinite;
  }

  @keyframes pulse-dot {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }

  .badge-available {
    background: rgba(34, 197, 94, 0.15);
    color: #16a34a;
    border: 1px solid rgba(34, 197, 94, 0.3);
  }

  .badge-available .badge-dot {
    background: #16a34a;
  }

  .badge-unavailable {
    background: rgba(239, 68, 68, 0.15);
    color: #dc2626;
    border: 1px solid rgba(239, 68, 68, 0.3);
  }

  .badge-unavailable .badge-dot {
    background: #dc2626;
  }

  .gallery-indicator {
    position: absolute;
    bottom: var(--spacing-3);
    left: var(--spacing-3);
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-1-5);
    padding: var(--spacing-1-5) var(--spacing-3);
    background: rgba(0, 0, 0, 0.7);
    backdrop-filter: blur(10px);
    border-radius: var(--radius-full);
    color: white;
    font-size: var(--text-xs);
    font-weight: var(--font-semibold);
    z-index: 2;
    transition: all var(--transition-fast);
  }

  .gallery-indicator svg {
    width: 14px;
    height: 14px;
  }

  .product-card:hover .gallery-indicator {
    background: rgba(255, 208, 47, 0.95);
    color: #1a1a2e;
  }

  .product-info {
    padding: var(--spacing-3);
    display: flex;
    flex-direction: column;
    gap: var(--spacing-2);
    flex: 1;
  }

  .product-header {
    flex: 1;
  }

  .product-name {
    font-size: var(--text-sm);
    font-weight: var(--font-bold);
    color: var(--color-black);
    margin: 0;
    line-height: 1.3;
    letter-spacing: -0.01em;
  }

  .product-model {
    font-size: 10px;
    color: var(--color-gray-500);
    margin: 0;
    font-weight: var(--font-medium);
  }

  .product-price {
    display: flex;
    align-items: baseline;
    gap: var(--spacing-1);
  }

  .price-currency {
    font-size: 9px;
    color: var(--color-gray-500);
    font-weight: var(--font-semibold);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .price-amount {
    font-size: var(--text-lg);
    color: var(--color-black);
    font-weight: var(--font-black);
    line-height: 1;
    letter-spacing: -0.02em;
  }

  .product-actions {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-2);
  }

  .btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-1-5);
    padding: var(--spacing-2) var(--spacing-3);
    border: none;
    border-radius: var(--radius-md);
    font-size: 11px;
    font-weight: var(--font-semibold);
    cursor: pointer;
    transition: all var(--transition-base);
    font-family: var(--font-primary);
  }

  .btn svg {
    width: 14px;
    height: 14px;
  }

  .btn-primary {
    background: var(--color-accent);
    color: var(--color-white);
    box-shadow: 0 4px 12px rgba(66, 98, 255, 0.2);
    position: relative;
    overflow: hidden;
  }

  .btn-primary::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s;
  }

  .btn-primary:hover::before {
    left: 100%;
  }

  .btn-primary:hover {
    background: #3451E6;
    box-shadow: 0 6px 16px rgba(66, 98, 255, 0.3);
    transform: translateY(-2px);
  }

  .btn-primary:active {
    transform: translateY(0);
  }

  .btn-secondary {
    background: var(--color-white);
    color: var(--color-black);
    border: 1px solid var(--color-gray-300);
    position: relative;
    overflow: hidden;
  }

  .btn-secondary::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(0, 0, 0, 0.05), transparent);
    transition: left 0.5s;
  }

  .btn-secondary:hover::before {
    left: 100%;
  }

  .btn-secondary:hover {
    background: var(--color-gray-50);
    border-color: var(--color-primary);
    color: var(--color-primary-dark);
    transform: translateY(-1px);
  }

  .btn-primary:disabled {
    background: var(--color-gray-300);
    cursor: not-allowed;
    opacity: 0.6;
  }

  .btn-primary:disabled:hover {
    transform: none;
  }

  /* Responsive */
  @media (max-width: 640px) {
    .product-image {
      height: 140px;
      padding: var(--spacing-3);
    }

    .product-image img {
      max-width: 100px;
      height: 100px;
    }

    .image-placeholder svg {
      width: 70px;
      height: 70px;
    }

    .product-name {
      font-size: var(--text-lg);
    }

    .price-amount {
      font-size: var(--text-2xl);
    }

    .btn {
      padding: var(--spacing-2-5) var(--spacing-4);
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Handle clickable product cards (entire card is clickable)
    const productCards = document.querySelectorAll('.product-card-clickable');
    productCards.forEach(card => {
      card.addEventListener('click', (e) => {
        // Prevent opening modal if clicking on a button
        const target = e.target as HTMLElement;
        if (target.closest('.btn-add-cart') || target.closest('.view-details-btn')) {
          return;
        }

        const productCard = e.currentTarget as HTMLElement;
        const id = productCard.dataset.productId || '';
        const name = productCard.querySelector('.product-name')?.textContent || '';
        const model = productCard.querySelector('.product-model')?.textContent || '';
        const priceElement = productCard.querySelector('.price-amount')?.textContent || '$0';
        const price = priceElement.replace('$ ', '').trim();
        const imgElement = productCard.querySelector('.product-image img') as HTMLImageElement;
        const image = imgElement?.src || '';
        const availableBadge = productCard.querySelector('.badge-available');
        const available = !!availableBadge;

        if (typeof (window as any).openProductDetailModal === 'function') {
          (window as any).openProductDetailModal({
            id, name, model, price, image, available
          });
        }
      });
    });

    // Handle view details buttons (explicitly)
    const viewDetailsButtons = document.querySelectorAll('.view-details-btn');
    viewDetailsButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();

        const btn = e.currentTarget as HTMLButtonElement;
        const productCard = btn.closest('.product-card');

        if (productCard) {
          const id = btn.dataset.id || '';
          const name = productCard.querySelector('.product-name')?.textContent || '';
          const model = productCard.querySelector('.product-model')?.textContent || '';
          const priceElement = productCard.querySelector('.price-amount')?.textContent || '$0';
          const price = priceElement.replace('$ ', '').trim();
          const imgElement = productCard.querySelector('.product-image img') as HTMLImageElement;
          const image = imgElement?.src || '';
          const availableBadge = productCard.querySelector('.badge-available');
          const available = !!availableBadge;

          if (typeof (window as any).openProductDetailModal === 'function') {
            (window as any).openProductDetailModal({
              id, name, model, price, image, available
            });
          }
        }
      });
    });

    // Add to cart functionality
    const addToCartButtons = document.querySelectorAll('.btn-add-cart');
    console.log('üõí Found', addToCartButtons.length, 'add to cart buttons');
    addToCartButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        console.log('üõí Add to cart button clicked');
        e.preventDefault();
        e.stopPropagation();

        const btn = e.currentTarget as HTMLButtonElement;
        const productCard = btn.closest('.product-card');

        if (productCard) {
          // Try to add to cart with retry logic
          const tryAddToCart = (retryCount = 0) => {
            if (typeof (window as any).cartManager !== 'undefined') {
            console.log('üõí Product card and cart manager found');
            const name = productCard.querySelector('.product-name')?.textContent?.trim() || '';
            const model = productCard.querySelector('.product-model')?.textContent?.trim() || '';
            const priceText = productCard.querySelector('.price-amount')?.textContent || '0';
            const price = (window as any).cartManager.parsePrice(priceText.replace('$ ', ''));
            const image = btn.dataset.productImage || undefined;
            // Always use the dataset productId to ensure consistency
            const id = btn.dataset.productId || name.toLowerCase().replace(/\s+/g, '-');
            
            console.log('üõí Button dataset.productId:', btn.dataset.productId);
            console.log('üõí Generated fallback ID:', name.toLowerCase().replace(/\s+/g, '-'));
            console.log('üõí Final ID being used:', id);

            console.log('üõí Adding product:', { id, name, model, price, image });
            (window as any).cartManager.addProduct({ id, name, model, price, image });

            const originalText = btn.querySelector('.btn-text')?.textContent;
            const textElement = btn.querySelector('.btn-text');
            if (textElement) {
              textElement.textContent = '¬°Agregado!';
              btn.disabled = true;

              setTimeout(() => {
                if (originalText && textElement) {
                  textElement.textContent = originalText;
                  btn.disabled = false;
                }
              }, 1500);
            }

            // No abrir el carrito autom√°ticamente - solo actualizar el badge
            } else if (retryCount < 30) { // Max 3 seconds of retries
              console.log(`üõí ProductCard: CartManager not ready, retrying ${retryCount + 1}/30`);
              setTimeout(() => tryAddToCart(retryCount + 1), 100);
            } else {
              console.error('‚ö†Ô∏è CartManager not available when trying to add product');
              alert('El sistema de carrito no est√° disponible en este momento. Por favor, int√©ntalo de nuevo.');
            }
          };
          
          tryAddToCart();
        }
      });
    });
  });
</script>
